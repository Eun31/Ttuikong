<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ttuikong.spring.model.dao.BoardDao">

	<!-- 전체 게시글 조회 -->
	<select id="selectAll" resultType="Board">
		SELECT b.id as postId,
		b.user_id, b.title, b.content, b.category,
		b.created_at, b.updated_at,
		b.image_url,
		u.nickname as user_nickname
		FROM board b
		LEFT JOIN user u ON
		b.user_id = u.id
		ORDER BY b.created_at DESC
	</select>

	<!-- 상세 게시글 조회 -->
	<select id="selectById" resultType="Board" parameterType="int">
		SELECT
		b.id as postId, b.user_id, b.title, b.content, b.category,
		b.created_at, b.updated_at, b.image_url,
		u.nickname as user_nickname
		FROM board b
		LEFT JOIN user u ON b.user_id = u.id
		WHERE b.id = #{postId}
	</select>

	<!-- 게시글 등록 -->
	<insert id="insertBoard" parameterType="Board"
		keyProperty="postId" useGeneratedKeys="true">
		INSERT INTO Board (user_id,
		title, content, category, image_url)
		VALUES (#{userId}, #{title},
		#{content}, #{category}, #{imageUrl});
	</insert>

	<!-- 게시글 삭제 -->
	<delete id="deleteBoard" parameterType="int">
		DELETE FROM Board
		WHERE id
		= #{postId};
	</delete>

	<!-- 게시글 수정 -->
	<update id="updateBoard" parameterType="Board">
		UPDATE Board
		SET title =
		#{title},
		content = #{content},
		category = #{category},
		image_url =
		#{imageUrl},
		updated_at = now()
		WHERE id = #{postId}
	</update>

	<!-- 사용자별 게시글 조회 -->
	<select id="selectByUserId" parameterType="int"
		resultType="Board">
		SELECT
		b.id as postId, b.user_id, b.title, b.content,
		b.category,
		b.created_at, b.updated_at, b.image_url,
		u.nickname as
		user_nickname
		FROM board b
		LEFT JOIN user u ON b.user_id = u.id
		WHERE
		b.user_id = #{userId}
		ORDER BY b.created_at DESC;
	</select>

	<select id="selectPopularPosts">
		SELECT
		b.id as postId,
		b.title,
		b.content,
		b.user_id,
		b.created_at,
		b.updated_at,
		u.nickname as userNickname
		FROM Board b
		INNER JOIN User u ON b.user_id = u.id
		LEFT JOIN (
		SELECT board_id, COUNT(*) as count
		FROM Board_Like
		GROUP BY board_id
		) like_count ON b.id = like_count.board_id
		ORDER BY like_count.count DESC, b.created_at DESC
		LIMIT #{limit}
	</select>

	<!-- 팔로우한 사용자들의 게시글 조회 -->
	<select id="selectFollowingPosts">
		SELECT
		b.id as postId,
		b.title,
		b.content,
		b.user_id,
		b.created_at,
		b.updated_at,
		u.nickname as userNickname
		FROM Board b
		INNER JOIN User u ON b.user_id = u.id
		INNER JOIN Follow f ON b.user_id = f.following_id
		WHERE f.follower_id = #{id}
		ORDER BY b.created_at DESC
		LIMIT #{limit}
	</select>
</mapper>